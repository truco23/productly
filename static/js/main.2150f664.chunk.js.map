{"version":3,"sources":["utils/images/logo.svg","utils/helpers/menu.ts","shared/components/Header/Header.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","menu","item","link","active","Logo","src","logo","alt","MenuSmall","useState","meunuToggle","setMenuToggle","xs","sm","md","className","onClick","map","key","href","MenuDefault","Menu","lg","xl","Authenticate","Nav","Header","Page","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,iMCU9BC,EAAwB,CACnC,CACEC,KAAM,UACNC,KAAM,UACNC,QAAQ,GAEV,CACEF,KAAM,YACNC,KAAM,YACNC,QAAQ,GAEV,CACEF,KAAM,SACNC,KAAM,SACNC,QAAQ,GAEV,CACEF,KAAM,YACNC,KAAM,YACNC,QAAQ,ICrBNC,EAAO,WACX,OACE,4BACE,yBAAKC,IAAKC,IAAMC,IAAI,WAKpBC,EAAY,WAAM,MAEeC,oBAAS,GAFxB,mBAEfC,EAFe,KAEFC,EAFE,KAItB,OACE,oCACE,kBAAC,UAAD,CAASC,IAAE,EAACC,IAAE,EAACC,IAAE,GACf,0BAAMC,UAAU,mBAAmBC,QAAS,kBAAML,GAAeD,KAAjE,SAGF,wBACEK,UAAS,wCAAmCL,EAAc,OAAS,QACnEM,QAAS,kBAAML,GAAeD,KAC9B,wBAAIK,UAAU,qBAAd,SAEEf,EAAKiB,KAAI,SAAAhB,GAAI,OACX,wBAAIiB,IAAKjB,EAAKA,MACZ,uBACEc,UAAS,2BAAsBd,EAAKE,QACpCgB,KAAI,WAAMlB,EAAKC,OAASD,EAAKA,WAKvC,yBACEc,UAAS,UAAKL,GAAe,WAC7BM,QAAS,kBAAML,GAAeD,QAKhCU,EAAc,WAClB,OACE,oCACE,wBACEL,UAAS,mCAEPf,EAAKiB,KAAI,SAAAhB,GAAI,OACX,wBAAIiB,IAAKjB,EAAKA,MACZ,uBACEc,UAAS,2BAAsBd,EAAKE,QACpCgB,KAAI,WAAMlB,EAAKC,OAASD,EAAKA,aASvCoB,EAAO,WAEX,OACE,oCACE,kBAAC,UAAD,CAAST,IAAE,EAACC,IAAE,EAACC,IAAE,GACf,kBAAC,EAAD,OAGF,kBAAC,UAAD,CAASQ,IAAE,EAACC,IAAE,GACZ,kBAAC,EAAD,SAMFC,EAAe,WACnB,OACE,yBAAKT,UAAU,+BACb,4BAAQA,UAAU,gCAAlB,WACA,4BAAQA,UAAU,gCAAlB,aAKAU,EAAM,WACV,OACE,yBAAKV,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QAwBSW,EAnBiB,WAE9B,OACE,4BAAQX,UAAU,UAChB,kBAAC,YAAD,KACE,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKD,GAAI,GACP,kBAAC,EAAD,OAGF,kBAAC,MAAD,CAAKA,GAAI,GACP,kBAAC,EAAD,WClGGa,MATf,WACE,OACE,iCACE,kBAAC,EAAD,QCKSC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCMcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2150f664.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6db1b434.svg\";","interface MenuInterface {\r\n  link: string;\r\n  item: string;\r\n  active?: boolean\r\n}\r\n\r\n/**\r\n * @name MenuItems\r\n * @description Items menu application\r\n */\r\nexport const menu: MenuInterface[] = [\r\n  {\r\n    item: 'Product',\r\n    link: 'product',\r\n    active: true\r\n  },\r\n  {\r\n    item: 'Customers',\r\n    link: 'costumers',\r\n    active: false\r\n  },\r\n  {\r\n    item: 'Pricng',\r\n    link: 'pricng',\r\n    active: false\r\n  },\r\n  {\r\n    item: 'Resources',\r\n    link: 'resources',\r\n    active: false\r\n  }\r\n]","import React, { FC, useState, useEffect } from 'react';\r\nimport { Row, Container, Visible, Col } from 'react-grid-system';\r\n// imports\r\nimport './header.scss';\r\nimport logo from '../../../utils/images/logo.svg';\r\nimport { menu } from '../../../utils/helpers/menu'\r\nexport interface HeaderProps { }\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <h1>\r\n      <img src={logo} alt=\"logo\" />\r\n    </h1>\r\n  )\r\n}\r\n\r\nconst MenuSmall = () => {\r\n  // state\r\n  const [meunuToggle, setMenuToggle] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Visible xs sm md>\r\n        <span className=\"header-menu-open\" onClick={() => setMenuToggle(!meunuToggle)}>open</span>\r\n      </Visible>\r\n\r\n      <ul\r\n        className={`header-menu header-menu-small ${meunuToggle ? 'show' : 'hide'}`}\r\n        onClick={() => setMenuToggle(!meunuToggle)}>\r\n        <li className=\"header-menu-close\">close</li>\r\n        {\r\n          menu.map(item => (\r\n            <li key={item.item}>\r\n              <a\r\n                className={`header-menu-link ${item.active}`}\r\n                href={`#${item.link}`}>{item.item}</a>\r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n      <div\r\n        className={`${meunuToggle && 'overlay'}`}\r\n        onClick={() => setMenuToggle(!meunuToggle)}></div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst MenuDefault = () => {\r\n  return (\r\n    <>\r\n      <ul\r\n        className={`header-menu header-menu-default`}>\r\n        {\r\n          menu.map(item => (\r\n            <li key={item.item}>\r\n              <a\r\n                className={`header-menu-link ${item.active}`}\r\n                href={`#${item.link}`}>{item.item}</a>\r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Menu = () => {\r\n\r\n  return (\r\n    <>\r\n      <Visible xs sm md>\r\n        <MenuSmall />\r\n      </Visible>\r\n\r\n      <Visible lg xl>\r\n        <MenuDefault />\r\n      </Visible>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Authenticate = () => {\r\n  return (\r\n    <div className=\"header-wrapper-authenticate\">\r\n      <button className=\"header-btn header-btn-signin\">Sign In</button>\r\n      <button className=\"header-btn header-btn-signup\">Sign Up</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <nav className=\"header-nav flex\">\r\n      <Menu />\r\n      <Authenticate />\r\n    </nav>\r\n  )\r\n}\r\n\r\nconst Header: FC<HeaderProps> = () => {\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <Container>\r\n        <Row>\r\n          <Col md={3}>\r\n            <Logo />\r\n          </Col>\r\n\r\n          <Col md={9}>\r\n            <Nav />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </header >\r\n  );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from '../shared/components/Header/Header';\r\n// imports\r\nfunction Page() {\r\n  return (\r\n    <section>\r\n      <Header />\r\n      {/* pages */}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import React from 'react';\r\nimport Page from './pages';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Page />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './utils/scss/styles.scss'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}